


//lsosowy zlepek liter z napisu startowego

#include<iostream>
#include<string>
using namespace std;


string K(string s) {
	string j = "";
	int l = s.length();
	for (int i = l; i > 0; i--) {
		int nr = rand() % i;
		string litera = s.substr(nr, 1);
		s = s.erase(nr, 1);
		j = j + litera;
	}
	return j;
}


int main(){
	
	string n;
	cout << "Tekst: ";
	cin >> n;
	cout << K(n) << endl;
	cout << K(n) << endl;
	cout << K(n) << endl;

}




//////////////////////////


ANAGRAM(pisanie od tyłu wyrazu)


#include<iostream>
#include<string>
using namespace std;


string A(string S) {
	string K = "";
	int L = S.length();
	for (int i = 0; i < L; i++)
		K = S[i] + K;
	return K;
}

int main(){
	
	string N;
	cout << "imie i nazwisko: ";
	getline(cin, N);
	cout << A(N) << endl;

	return 0;
}


///////////////////////////////////////////////////////////////////////////////

najwieksza 3 liczb 



#include<iostream>
#include<string>
using namespace std;


void dbz() {

	double a, b, c;
	cin >> a;
	cin >> b;
	cin >> c;
	double N = max(a, b);
	double K = max(c, N);
	cout << "wynik: ";
	cout << K;



}

int main(){
	
	cout << "3 liczby: ";

	dbz();

	return 0;



}

///////////////////////////////////////////////


Mini szyfrowanie. Napisz funkcję, która zwróci zaszyfrowany tekst. Zasada szyfrowania: kod ASCII każdego znaku zwiększamy o konkretną liczbę

#include<iostream>
#include<string>
using namespace std;

string S1(string k, int s) {
	int m = k.length();
	for (int i = 0; i < m; i++) {
		
		k[i] = char(int(k[i]) + s);
	}
	return k;
}


int main() {

	string sk;
	int ks;
	cout << "napis: ";
	getline(cin, sk);
	cout << "kod: ";
	cin >> ks;
	sk = S1(sk, ks);
	cout << sk << endl;
	
	
	
	return 0;
}


//////////////////////////


Mini szyfrowanie. Napisz funkcję, która zwróci zaszyfrowany tekst. Zasada szyfrowania: przestawiamy znaki w tekście 1-2 3-4 5-6 itd.

#include<iostream>
#include<string>
using namespace std;

string SF(string k) {
	int s = k.length();
	
	if (s % 2 == 1) s = s - 1;
	for (int i = 0; i < s; i = i + 2) {
		
		char m1 = k[i];
		char m2 = k[i + 1];
		k[i] = m2;
		k[i + 1] = m1;
	}
	return k;
}



int main() {

	
	string lk;
	cout << "wpisz słowo: ";
	getline(cin, lk);
	lk = SF(lk);
	cout << lk << endl;
	
	lk = SF(lk);
	cout << lk << endl;
	
	
	return 0;
}

///////////////////////////////////////////////////

zad 1.4napisz funkcje ktora oblicza nta liczbe ciagu rekurekcyjna wzorem

#include<iostream>
using namespace std;

double ciag(int n)
{

	if (n == 1)

		return 1;

		if (n==2)
			return 0.5;
		return -ciag(n - 1) * ciag(n - 2);
}

int main()
{

	int n;
	cout << "podaj nr wyrazu ciagu , ktorego wartosc chcesz policzyc: ";
	cin >> n;
	cout << n << "wyraz ciagu ma wartosc " << ciag(n) << endl;
	return 0;
}
/////////////////////////////////////////////////
najwieksza i suma liczb  bezwgledna 

#include<iostream>
#include<string>
using namespace std;


void dbz() {

	double a, b, c;
	cin >> a;
	cin >> b;
	cin >> c;
	double N = max(a, b);
	double K = max(c, N);
	cout << "najwieksza: ";
	cout << K; 
	cout << endl;
	if (a < 0) {
	
		a = -a;
	}
	if (c < 0) {

		c = -c;
	}
	if (b< 0) {

		b = -b;
	}
	double wyn = a + b + c;
	cout << "Suma tych licz to: " << wyn;

}





int main() {

	cout << "3 liczby: ";

	dbz();

	return 0;



}


